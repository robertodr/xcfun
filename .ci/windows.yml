steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
    displayName: "Using Python version: $(python.version)"

  - script: |
      python -m pip install --upgrade pip pytest numpy
    displayName: 'Pip install Python dependencies'

  - task: CMake@1
    inputs:
      workingDirectory: 'build'
      cmakeArgs: '-A x64 -DSHARED_LIBRARY_ONLY=ON -DCMAKE_INSTALL_PREFIX=..\Software\xcfun ..'

  # Build
  - script: |
      cmake --build build ^
            --config Release ^
            --target install ^
            -- -verbosity:normal
    displayName: "Build XCFun"

  # Test (ctest)
  - script: |
      cd build
      ctest --config Release ^
            --output-on-failure ^
            --verbose
      type ..\Software\xcfun\CMake\XCFunConfig.cmake
    displayName: "Test XCFun with CTest"

  ## Test Python module can be imported
  #- script: |
  #    set PYTHONPATH=.\Software\xcfun\lib;%PYTHONPATH%
  #    python -c "import xcfun; print(xcfun.xcfun_splash())"
  #  displayName: "Test XCFun Python module"

  # Test we can build the C++ example
  - task: CMake@1
    inputs:
      workingDirectory: 'build_CXX_host'
      cmakeArgs: '--debug-output -A x64 -DXCFun_DIR=..\..\Software\xcfun\CMake ..\examples\CXX_host'

  - script: |
      cd build_CXX_host
      cmake --build . ^
            --config Release
      ctest
    displayName: "Build and test C++ host example"

  # Test we can build the C example
  - task: CMake@1
    inputs:
      workingDirectory: 'build_C_host'
      cmakeArgs: '-A x64 -DXCFun_DIR=..\..\Software\xcfun\CMake ..\examples\C_host'

  - script: |
      cd build_C_host
      cmake --build . ^
            --config Release
      ctest
    displayName: "Build and test C host example"
