jobs:

  # Configure, build, install, and test job
  - job: 'windows_build'
    displayName: 'Windows VS2017'
    pool:
      vmImage: 'vs2017-win2016'
    steps:
      # Install Chocolatey (https://chocolatey.org/install#install-with-powershellexe)
      - powershell: |
          Set-ExecutionPolicy Bypass -Scope Process -Force
          iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
          Write-Host "##vso[task.setvariable variable=PATH]$env:PATH"
          choco --version
        displayName: "Install Chocolatey"

      # Install Miniconda
      - script: |
          choco install miniconda3 --yes
          set PATH=C:\tools\miniconda3\Scripts;C:\tools\miniconda3;C:\tools\miniconda3\Library\bin;%PATH%
          echo '##vso[task.setvariable variable=PATH]%PATH%'
          set LIB=C:\tools\miniconda3\Library\lib;%LIB%
          echo '##vso[task.setvariable variable=LIB]%LIB%'
          conda --version
        displayName: "Install Miniconda"

      # Configure Miniconda
      - script: |
          conda config --set always_yes yes
          conda info
        displayName: "Configure Miniconda"

      # Create conda enviroment
      # Note: conda activate doesn't work here, because it creates a new shell!
      - script: |
          conda install cmake ^
                        ninja ^
                        numpy ^
                        pybind11 ^
                        pytest ^
                        python=3.7 ^
                        -c conda-forge
          conda list
        displayName: "Install conda packages"

      # Configure
      - script: |
          setlocal EnableDelayedExpansion
          mkdir build & cd build
          cmake -G Ninja ^
                -DCMAKE_BUILD_TYPE=Release ^
                -DCMAKE_INSTALL_PREFIX=../Software/xcfun ^
                -DXCFUN_PYTHON_INTERFACE=ON ^
                $(Build.SourcesDirectory)
        displayName: "Configure XCFun"
        workingDirectory: $(Build.BinariesDirectory)

      # Build and install
      - script: |
          cmake --build . ^
                --config Release
                --target install
        displayName: "Build XCFun"
        workingDirectory: $(Build.BinariesDirectory)/build

      # Test (ctest)
      - script: |
          setlocal EnableDelayedExpansion
          ctest --build-config Release ^
                --output-on-failure ^
                --verbose
        displayName: "Test XCFun with CTest"
        workingDirectory: $(Build.BinariesDirectory)/build

      # Test Python module can be imported
      - script: |
          set PYTHONPATH=$(Build.BinariesDirectory)\Software\xcfun\lib;%PYTHONPATH%
          python -c "import xcfun; print(xcfun.xcfun_splash())"
        displayName: "Test XCFun Python module"
        workingDirectory: $(Build.BinariesDirectory)

      # Test we can build the C++ example
      - script: |
          setlocal EnableDelayedExpansion
          cd examples/CXX_host
          mkdir build & cd build
          cmake -G Ninja ^
                -DCMAKE_BUILD_TYPE=Release ^
                -DXCFun_DIR=$(Build.BinariesDirectory)\Software\xcfun\share\cmake\XCFun ^
                $(Build.SourcesDirectory)
          cmake --build . ^
                --config Release
          ctest
        displayName: "Build C++ host example"
        workingDirectory: $(Build.BinariesDirectory)

      # Test we can build the C example
      - script: |
          setlocal EnableDelayedExpansion
          cd examples/C_host
          mkdir build & cd build
          cmake -G Ninja ^
                -DCMAKE_BUILD_TYPE=Release ^
                -DXCFun_DIR=$(Build.BinariesDirectory)\Software\xcfun\share\cmake\XCFun ^
                $(Build.SourcesDirectory)
          cmake --build . ^
                --config Release
          ctest
        displayName: "Build C host example"
        workingDirectory: $(Build.BinariesDirectory)

