steps:
  - script: |
      choco install ninja --yes
      ninja --version
    displayName: "Install Ninja"

  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
    displayName: "Using Python version: $(python.version)"

  - script: |
      python -m pip install --upgrade pip pytest numpy
    displayName: 'Pip install Python dependencies'

  - script: |
      call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x86_amd64
      mkdir build & cd build
      cmake -G Ninja ^
            -DCMAKE_BUILD_TYPE=%CMAKE_BUILD_TYPE% ^
            -DCMAKE_INSTALL_PREFIX=../Software/xcfun ^
            -DCMAKE_CXX_COMPILER=cl.exe ^
            -DXCFUN_PYTHON_INTERFACE=ON ^
            ..
    displayName: "Configure XCFun"

  - script: |
      cmake --build . ^
            --config Release ^
            --target install ^
            -- -v -d stats
    displayName: "Build XCFun"

  - script: |
      ctest -C Release ^
            --output-on-failure ^
            --verbose
    displayName: "Test XCFun with CTest"
    continueOnError: true

  - script: |
      set PYTHONPATH=.\Software\xcfun\lib\python;%PYTHONPATH%
      python -c "import xcfun; print(xcfun.xcfun_splash())"
    displayName: "Test XCFun Python module"
    continueOnError: true

  # Test we can build the C++ example
  - task: CMake@1
    inputs:
      workingDirectory: 'build_CXX_host'
      cmakeArgs: '-A x64 -DXCFun_DIR=..\..\Software\xcfun\CMake ..\examples\CXX_host'

  - script: |
      cd build_CXX_host
      cmake --build . ^
            --config Release ^
            -- -verbosity:normal
    displayName: "Build C++ host example"

  # Test we can build the C example
  - task: CMake@1
    inputs:
      workingDirectory: 'build_C_host'
      cmakeArgs: '-A x64 -DXCFun_DIR=..\..\Software\xcfun\CMake ..\examples\C_host'

  - script: |
      cd build_C_host
      cmake --build . ^
            --config Release ^
            -- -verbosity:normal
    displayName: "Build C host example"
